rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read all users but only write their own data
    match /users/{userId} {
      allow read: if true; // All authenticated users can read user profiles
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chats collection - users can only access chats they participate in
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
        
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // Calls collection - users can access calls they are involved in
    match /calls/{callId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId ||
        request.auth.uid == resource.data.recipientId
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.callerId ||
        request.auth.uid == request.resource.data.receiverId ||
        request.auth.uid == request.resource.data.recipientId
      );
      
      // Media subcollection for Firebase call service (audio/video data)
      match /media/{mediaId} {
        allow read, write: if request.auth != null && (
          request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId ||
          request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.receiverId ||
          request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.recipientId
        );
        allow create: if request.auth != null && (
          request.auth.uid == request.resource.data.senderId
        );
      }
    }
    
    // Call signaling collection - for WebRTC signaling data
    match /call-signaling/{signalingId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.from ||
        request.auth.uid == resource.data.to
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.from ||
        request.auth.uid == request.resource.data.to
      );
    }
    
    // Test collection for debugging and connectivity tests
    match /test/{testId} {
      allow read, write: if request.auth != null;
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
